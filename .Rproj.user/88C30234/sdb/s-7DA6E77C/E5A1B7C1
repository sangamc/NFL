{
    "collab_server" : "",
    "contents" : "# Libraries ----\nrequire(splitstackshape)\nrequire(XML)\nrequire(RCurl)\nrequire(data.table)\nrequire(zoo)\nrequire(plyr)\nrequire(dplyr)\n\n\n# URLS ----\nroundadvurl <- c(\"http://basketball.realgm.com/national/tournament/1/Olympic-Games/157/stats/2016/Advanced_Stats/All/points/All/desc/1/\",\n                 \"http://basketball.realgm.com/national/tournament/1/Olympic-Games/157/stats/2016/Advanced_Stats/All/per/All/desc/2\")\n\nroundtoturl <- c(\"http://basketball.realgm.com/national/tournament/1/Olympic-Games/157/stats/2016/Totals/All/per/All/desc/1/\",\n                 \"http://basketball.realgm.com/national/tournament/1/Olympic-Games/157/stats/2016/Totals/All/per/All/desc/2\")\n\nround1url <- c(\"http://basketball.realgm.com/national/boxscore/2016-08-06/United-States-at-China/240902\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-06/Serbia-at-Venezuela/240903\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-06/France-at-Australia/240901\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-07/Spain-at-Croatia/240905\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-07/Argentina-at-Nigeria/240906\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-07/Lithuania-at-Brazil/240904\")\n\nround2url <- c(\"http://basketball.realgm.com/national/boxscore/2016-08-08/Venezuela-at-United-States/240908\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-08/China-at-France/240909\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-08/Australia-at-Serbia/240907\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-09/Nigeria-at-Lithuania/240911\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-09/Croatia-at-Argentina/240912\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-09/Brazil-at-Spain/240910\")\n\nround3url <- c(\"http://basketball.realgm.com/national/boxscore/2016-08-10/United-States-at-Australia/240914\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-10/China-at-Venezuela/240915\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-10/France-at-Serbia/240913\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-11/Spain-at-Nigeria/240917\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-11/Argentina-at-Lithuania/240918\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-11/Croatia-at-Brazil/240916\")\n\nround4url <- c(\"http://basketball.realgm.com/national/boxscore/2016-08-12/Australia-at-China/240919\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-12/Serbia-at-United-States/240920\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-12/Venezuela-at-France/240921\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-13/Brazil-at-Argentina/240922\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-13/Lithuania-at-Spain/240923\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-13/Nigeria-at-Croatia/240924\")\n\nround5url <- c(\"http://basketball.realgm.com/national/boxscore/2016-08-14/France-at-United-States/240925\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-14/Venezuela-at-Australia/240926\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-14/China-at-Serbia/240927\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-15/Brazil-at-Nigeria/240928\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-15/Argentina-at-Spain/240929\",\n               \"http://basketball.realgm.com/national/boxscore/2016-08-15/Croatia-at-Lithuania/240930\")\n\nquatersurl <- c(\"http://basketball.realgm.com/national/boxscore/2016-08-17/Lithuania-at-Australia/239496\",\n                 \"http://basketball.realgm.com/national/boxscore/2016-08-17/France-at-Spain/239497\",\n                 \"http://basketball.realgm.com/national/boxscore/2016-08-17/Argentina-at-United-States/239498\",\n                 \"http://basketball.realgm.com/national/boxscore/2016-08-17/Serbia-at-Croatia/239499\")\n\nsemisurl <- c(\"http://basketball.realgm.com/national/boxscore/2016-08-19/United-States-at-Spain/239500\",\n              \"http://basketball.realgm.com/national/boxscore/2016-08-19/Serbia-at-Australia/239501\")\n\n\nownershipurl <- c(\"data/ownership/aug6.csv\",\"data/ownership/aug7.csv\",\"data/ownership/aug8.csv\",\"data/ownership/aug9.csv\",\n                  \"data/ownership/aug10.csv\", \"data/ownership/aug11.csv\", \"data/ownership/aug12.csv\", \"data/ownership/aug13.csv\",\n                  \"data/ownership/aug14.csv\", \"data/ownership/aug15.csv\", \"data/ownership/aug16.csv\", \"data/ownership/aug19.csv\")\n\n# Download Functions ----\n#ownership history\nolympics.ownership <- data.frame()\nfor(i in 1:length(ownershipurl)){\n  url <- ownershipurl[i]\n  print(url)\n  tbl <- fread(url, encoding = \"UTF-8\", select = (8:9))\n  tbl[tbl==\"\"] <- NA\n  tbl <- na.omit(tbl)\n  if (i == 1) { tbl$game <- 1\n  tbl$date <- \"2016-8-6\" }\n  if (i == 2) { tbl$game <- 1\n  tbl$date <- \"2016-8-7\" }\n  if (i == 3) { tbl$game <- 2\n  tbl$date <- \"2016-8-8\" }\n  if (i == 4) { tbl$game <- 2\n  tbl$date <- \"2016-8-9\" }\n  if (i == 5) { tbl$game <- 3\n  tbl$date <- \"2016-8-10\" }\n  if (i == 6) { tbl$game <- 3\n  tbl$date <- \"2016-8-11\" }\n  if (i == 7) { tbl$game <- 4\n  tbl$date <- \"2016-8-12\" }\n  if (i == 8) { tbl$game <- 4\n  tbl$date <- \"2016-8-13\" }\n  if (i == 9) { tbl$game <- 5\n  tbl$date <- \"2016-8-14\" }\n  if (i == 10) { tbl$game <- 5\n  tbl$date <- \"2016-8-15\" }\n  if (i == 11) { tbl$game <- 6\n  tbl$date <- \"2016-8-16\" }\n  if (i == 12) { tbl$game <- 7\n  tbl$date <- \"2016-8-19\" }\n  olympics.ownership <- rbind(olympics.ownership,tbl)\n}\ncolnames(olympics.ownership)[2] <- \"Drafted\"\nolympics.ownership$Drafted <- gsub(\"%\",\"\",olympics.ownership$Drafted)\nolympics.ownership$date <- as.Date(olympics.ownership$date)\n#olympics.ownership[,-c(1)] <- aaply(olympics.ownership[,-c(1)], 2, as.numeric)\n#write.csv(olympics.ownership,\"data/ownership.csv\") # Still need to find a way to handle Percentages value type\n\n# advanced data\nolympics.adv <- data.frame()\nfor(i in 1:length(roundadvurl)){\n  url <- roundadvurl[i]\n  print(url)\n  tbl <- readHTMLTable(url)\n  #tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.adv <- rbind(olympics.adv,tbl[[1]])\n}\nolympics.adv <- olympics.adv[,-1]\n\n# game totals\nolympics.tot <- data.frame()\nfor(i in 1:length(roundtoturl)){\n  url <- roundtoturl[i]\n  print(url)\n  tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.tot <- rbind(olympics.tot,tbl[[1]])\n}\nolympics.tot <- olympics.tot[,-1]\n\n# Group Stages # -----\nolympics.round1 <- data.frame()\nfor(i in 1:length(round1url)){\n  url <- round1url[i]\n  print(url)\n  tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.round1 <- rbind(olympics.round1, tbl[[4]],tbl[[5]])\n}\nolympics.round1$game <- 1\n#olympics.round1$Min <- NA\n\nolympics.round2 <- data.frame()\nfor(i in 1:length(round2url)){\n  url <- round2url[i]\n  print(url)\n  tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.round2 <- rbind(olympics.round2,tbl[[4]],tbl[[5]])\n}\nolympics.round2$game <- 2\n\nolympics.round3 <- data.frame()\nfor(i in 1:length(round3url)){\n  url <- round3url[i]\n  print(url)\n  tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.round3 <- rbind(olympics.round3,tbl[[4]],tbl[[5]])\n}\nolympics.round3$game <- 3\n\nolympics.round4 <- data.frame()\nfor(i in 1:length(round4url)){\n  url <- round4url[i]\n  print(url)\n  tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.round4 <- rbind(olympics.round4,tbl[[4]],tbl[[5]])\n}\nolympics.round4$game <- 4\n\nolympics.round5 <- data.frame()\nfor(i in 1:length(round5url)){\n  url <- round5url[i]\n  print(url)\n  tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.round5 <- rbind(olympics.round5,tbl[[4]],tbl[[5]])\n}\nolympics.round5$game <- 5\n\nolympics.quaters <- data.frame()\nfor(i in 1:length(quatersurl)){\n  url <- quatersurl[i]\n  print(url)\n  tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.quaters <- rbind(olympics.quaters,tbl[[4]],tbl[[5]])\n}\nolympics.quaters$game <- 6\n\nolympics.semis <- data.frame()\nfor(i in 1:length(semisurl)){\n  url <- semisurl[i]\n  print(url)\n  tbl <- readHTMLTable(getURL(url, ssl.verifyPeer=FALSE), stringsAsFactors = F)\n  olympics.semis <- rbind(olympics.semis,tbl[[4]],tbl[[5]])\n}\nolympics.semis$game <- 7\n\n## FIXING THE DATA ## ----\n# olympics.qaul <- read.csv(\"data/olyqual.csv\")\n# olympics.ownership <- read.csv(\"data/ownership.csv\")\nindex <- read.csv(\"data/index.csv\")\nolympics.ownership$Name <- index$Player[match(olympics.ownership$Player, index$Name)]\ncolnames(olympics.ownership)[1] <- \"Name\"\ncolnames(olympics.ownership)[5] <- \"Player\"\nolympics.ownership$Team <- index$Team[match(olympics.ownership$Name, index$Name)]\n\ndf <- rbind(olympics.round1, olympics.round2, olympics.round3, olympics.round4, olympics.round5, olympics.quaters, olympics.semis)\ndf$Team <- index$Team[match(df$Player, index$Player)]\ndf <- merge(df, olympics.ownership,by=c(\"Player\", \"game\"),all.x = TRUE)\ndf <- df[ -c(20,23)]\n\ndf <- cSplit(df, c(\"FGM-A\",\"3PM-A\",\"FTM-A\"), c(\"-\"))\ncolnames(df)[19] <- \"FGM\"\ncolnames(df)[20] <- \"FGA\"\ncolnames(df)[21] <- \"TPM\"\ncolnames(df)[22] <- \"TPA\"\ncolnames(df)[23] <- \"FTM\"\ncolnames(df)[24] <- \"FTA\"\n\n## NEED TO CONVERT TIME AND PERCENTAGES FROM CHARS ##\nwrite.csv(df,\"olympicStats.csv\")\ndf <- read.csv(\"olympicStats.csv\")\ndf$date <- as.Date(df$date, \"%m/%d/%Y\")\n\n#df <- subset(df, select = -c(X, Pos))\n#df$Min <- df$Min * 24\n#df$Drafted <- df$Drafted * 100\n\n# Adding new columns -----\ndblDbl <- function(x){\n  p <- ifelse(x$PTS > 9, 1, 0)\n  r <- ifelse(x$Reb > 9, 1, 0)\n  a <- ifelse(x$Ast > 9, 1, 0)\n  b <- ifelse(x$BLK > 9, 1, 0)\n  st <- ifelse(x$STL > 9, 1, 0)\n  pts <- ifelse(p + r + a + b + st > 2, 3,\n                ifelse(p + r + a + b + st > 1, 1.5, 0))\n  pts\n}\n\ncalcFP <- function(x){\n  pts <- x$PTS + x$TPM * 0.5 + x$Reb * 1.25 + x$Ast * 1.5 +\n    x$STL * 2 + x$BLK * 2 + x$TO * -.5\n  pts <- pts + dblDbl(x)\n  pts\n}\n\ndf$FP <- calcFP(df)\ndf$FPM <- with(df, FP / Min)\n\ndf <- subset(df, select = -c(X, Off, Def, Reb, Ast, PF, STL, TO, BLK, PTS, FGM, FGA, TPM, TPA, FTM, FTA))\ncolnames(df)[7] <- \"Team\"\n\n#### Start Last game\ndf$Start <- ifelse(df$Status == \"Starter\",1,0)\ndf <- as.data.frame(df %>% group_by(Player) %>% arrange(date) %>% \n                      mutate(lstart = lag(Start, n = 1, default = NA))) \n\n#### Last 3 game min average and last game min calcuation\ndf <- as.data.frame(df %>% group_by(Player) %>% arrange(date) %>% \n                       mutate(min1 = lag(Min, 1, default = NA)) %>% \n                       mutate(min3 = rollapply(min1,width=3,mean,align= \"right\", fill=min1, partial=TRUE)))\n\n#### Last 3 game ownership average and last game ownership calcuation\ndf <- as.data.frame(df %>% group_by(Player) %>% arrange(date) %>% \n                      mutate(own1 = lag(Drafted, 1, default = NA)) %>% \n                      mutate(own3 = rollapply(own1,width=3,mean,align= \"right\", fill=own1, partial=TRUE)))\n\ncombined.stats <- function(x) {\n  c.gme <- 1\n  c.sts <- x[6,3]\n  c.pos <- x[1,4]\n  c.team <- x[1,7]\n  c.min <- mean(x$Min, na.rm = TRUE)\n  c.min1 <- x[6,16]\n  c.min3 <- x[6,17]\n  c.own <- mean(x$Drafted, na.rm = TRUE)\n  c.own1 <- x[6,14]\n  c.own3 <- x[6,15]\n  c.fp <- mean(x$FP, na.rm = TRUE)\n  c.fpm <- mean(x$FPM, na.rm = TRUE)\n  data.frame( Pos=c.pos, Team=c.team, game=c.gme, Status=c.sts,  Min=c.min, min1=c.min1, min3=c.min3,\n              Own=c.own, own1=c.own1, own3=c.own3, FP=c.fp, FPm=c.fpm)\n}\n\n\n## Combine for Crunching -----\n#\ncombined.stats <- function(d) {\n  #C.STS <-mean(d$Status, na.rm=TRUE)\n  C.OWN <-mean(d$Drafted, na.rm=TRUE)\n  c.MIN <-sum(d$Min, na.rm = TRUE) / 3\n  c.FIC <-mean(d$FIC, na.rm=TRUE)\n  c.FPM <-mean(d$FPM, na.rm=TRUE)\n  c.PTS <-mean(d$PTS, na.rm=TRUE)\n  c.TPM <-mean(d$TPM, na.rm=TRUE)\n  c.AST <-mean(d$Ast, na.rm=TRUE)\n  c.REB <-mean(d$Reb, na.rm=TRUE)\n  c.BLK <-mean(d$BLK, na.rm=TRUE)\n  c.STL <-mean(d$STL, na.rm=TRUE)\n  c.TOV <-mean(d$TO, na.rm=TRUE)\n  data.frame( OWN=C.OWN, MIN=c.MIN, FIC=c.FIC, FPM=c.FPM, PTS=c.PTS, \n             TPM=c.TPM, AST=c.AST, REB=c.REB, BLK=c.BLK, STL=c.STL, TOV=c.TOV)\n}\n\n\nstats.combined <- ddply(df, .(Player), combined.stats)\nbr[,c(6:14)] <- apply(br[,c(6:14),drop = FALSE], 2, function(x) round(x,2)) ## Fix Rounding\n\n### Train and test data ----\ndk <- df\ndk$tran_fp <- ifelse(dk$FP <0, 0, dk$FP^(1/2))  ### make sure no negative values in FP\ndist <- fitdist(dk$tran_fp, \"norm\")\nplot(dist)\n\ntrain <- dk\ntrain <- train %>%\n  arrange(date)\n\ntest <- stats.combined\n\ntest$Proj_FP <- predict(mdl, test, allow.new.levels=TRUE)^2\nrsq(test$FP, test$Proj_FP) \noly <- test\noly$Name <- index$Name[match(oly$Player, index$Player)]\n\n\n# Junk ----\n#df$FPM_Qual <- olympics.qaul$fptm[match(df$Player, olympics.qaul$Name)]\nstats.combined$FPM_Qual <- olympics.qaul$fptm[match(stats.combined$Player, olympics.qaul$Name)]\n#stats.combined$FPMean <- with(stats.combined, median(FPM, FPM_Qual))\nwrite.csv(stats.combined, \"stats.csv\")\n## clean up data\nstats.combined <- read.csv(\"stats.csv\",encoding = \"UTF-8\")\n\nstats.combined$FP <- with(stats.combined, FPM * MIN)\nstatus <- olympics.semis\nstats.combined$STS <- status$Status[match(stats.combined$Player, status$Player)]\nstats.combined$USG <- olympics.adv$`USG%`[match(stats.combined$Player, olympics.adv$Player)]\n\n\n#write.csv(stats.combined, \"data/oly.csv\")\n#oly <- stats.combined[,c(\"Player\", \"status\", \"MIN\", \"USG\", \"FIC\", \"FP\", \"OWN\", \"Name\")]\n#write.csv(oly, \"data/oly.csv\")\noly <- stats.combined[,c(\"Player\", \"STS\", \"MIN\", \"USG\", \"FIC\", \"OWN\", \"Name\", \"FP\")]\n\ndk.dat <- dk.dat[,c(\"Name\", \"Salary\", \"Pos\", \"Team\", \"Avg\", \"STS\", \"OWN\", \"USG\", \"MIN\", \"PTS\", \"TPM\", \"AST\", \"REB\", \"BLK\", \"STL\", \"TOV\", \"FIC\", \"FP\")]\nwrite.csv(dk.dat, \"~/R/App-1/appTestData.csv\")\n\n",
    "created" : 1473556365937.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1546437908",
    "id" : "E5A1B7C1",
    "lastKnownWriteTime" : 1471816848,
    "last_content_update" : 1471816848,
    "path" : "~/R/NBA/Scripts/Olympics.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}